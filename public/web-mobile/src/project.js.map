{"version":3,"sources":["project.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","Game","module","cc","_RFpush","Player","ScoreFX","Star","Class","extends","Component","properties","starPrefab","default","type","Prefab","scoreFXPrefab","maxStarDuration","minStarDuration","ground","Node","player","scoreDisplay","Label","scoreAudio","url","AudioClip","btnNode","gameOverNode","controlHintLabel","keyboardHint","multiline","touchHint","onLoad","this","groundY","y","height","currentStar","currentStarX","timer","starDuration","isRunning","hintText","sys","isMobile","string","onStartGame","resetScore","setPositionX","active","startMoveAt","p","spawnNewStar","newStar","pool","hasObject","getFromPool","node","instantiate","addChild","setPosition","getNewStarPosition","getComponent","init","startTimer","random0To1","randomMinus1To1","width","randX","randY","jumpHeight","maxX","gainScore","pos","score","toString","fx","spawnScoreFX","play","audioEngine","playEffect","update","dt","gameOver","enabled","stopMove","destroy","_RFpop","jumpDuration","squashDuration","maxMoveSpeed","accel","jumpAudio","accLeft","accRight","xSpeed","minPosX","parent","maxPosX","jumpAction","setJumpAction","setInputControl","self","eventManager","addListener","event","EventListener","KEYBOARD","onKeyPressed","keyCode","KEY","left","d","right","onKeyReleased","TOUCH_ONE_BY_ONE","onTouchBegan","touch","touchLoc","getLocation","x","winSize","onTouchEnded","jumpUp","moveBy","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","squash","scaleTo","stretch","scaleBack","callback","callFunc","playJumpSound","repeatForever","sequence","getCenterPos","centerPos","runAction","stopAllActions","Math","abs","ScoreAnim","hideFX","removeFromParent","putInPool","anim","Animation","pickRadius","game","opacity","getPlayerDistance","playerPos","dist","pDistance","position","onPicked","getPosition","opacityRatio","minOpacity","floor"],"mappings":"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","file":"project.js","sourcesContent":["require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({\"Game\":[function(require,module,exports){\ncc._RFpush(module, '0486fOqHrJN+6c5PQg5FHh9', 'Game');\n// scripts/Game.js\n\n'use strict';\n\nvar Player = require('Player');\nvar ScoreFX = require('ScoreFX');\nvar Star = require('Star');\n\nvar Game = cc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // 这个属性引用了星星预制资源\n        starPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n        scoreFXPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n        // 星星产生后消失时间的随机范围\n        maxStarDuration: 0,\n        minStarDuration: 0,\n        // 地面节点，用于确定星星生成的高度\n        ground: {\n            'default': null,\n            type: cc.Node\n        },\n        // player 节点，用于获取主角弹跳的高度，和控制主角行动开关\n        player: {\n            'default': null,\n            type: Player\n        },\n        // score label 的引用\n        scoreDisplay: {\n            'default': null,\n            type: cc.Label\n        },\n        // 得分音效资源\n        scoreAudio: {\n            'default': null,\n            url: cc.AudioClip\n        },\n        btnNode: {\n            'default': null,\n            type: cc.Node\n        },\n        gameOverNode: {\n            'default': null,\n            type: cc.Node\n        },\n        controlHintLabel: {\n            'default': null,\n            type: cc.Label\n        },\n        keyboardHint: {\n            'default': '',\n            multiline: true\n        },\n        touchHint: {\n            'default': '',\n            multiline: true\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        // 获取地平面的 y 轴坐标\n        this.groundY = this.ground.y + this.ground.height / 2;\n\n        // store last star's x position\n        this.currentStar = null;\n        this.currentStarX = 0;\n\n        // 初始化计时器\n        this.timer = 0;\n        this.starDuration = 0;\n\n        // is showing menu or running game\n        this.isRunning = false;\n\n        // initialize control hint\n        var hintText = cc.sys.isMobile ? this.touchHint : this.keyboardHint;\n        this.controlHintLabel.string = hintText;\n    },\n\n    onStartGame: function onStartGame() {\n        // 初始化计分\n        this.resetScore();\n        // set game state to running\n        this.isRunning = true;\n        // set button and gameover text out of screen\n        this.btnNode.setPositionX(3000);\n        this.gameOverNode.active = false;\n        // reset player position and move speed\n        this.player.startMoveAt(cc.p(0, this.groundY));\n        // spawn star\n        this.spawnNewStar();\n    },\n\n    spawnNewStar: function spawnNewStar() {\n        var newStar = null;\n        // 使用给定的模板在场景中生成一个新节点\n        if (cc.pool.hasObject(Star)) {\n            newStar = cc.pool.getFromPool(Star).node;\n        } else {\n            newStar = cc.instantiate(this.starPrefab);\n        }\n        // 将新增的节点添加到 Canvas 节点下面\n        this.node.addChild(newStar);\n        // 为星星设置一个随机位置\n        newStar.setPosition(this.getNewStarPosition());\n        // pass Game instance to star\n        newStar.getComponent('Star').init(this);\n        // start star timer and store star reference\n        this.startTimer();\n        this.currentStar = newStar;\n    },\n\n    startTimer: function startTimer() {\n        // get a life duration for next star\n        this.starDuration = this.minStarDuration + cc.random0To1() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n    },\n\n    getNewStarPosition: function getNewStarPosition() {\n        // if there's no star, set a random x pos\n        if (!this.currentStar) {\n            this.currentStarX = cc.randomMinus1To1() * this.node.width / 2;\n        }\n        var randX = 0;\n        // 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标\n        var randY = this.groundY + cc.random0To1() * this.player.jumpHeight + 50;\n        // 根据屏幕宽度和上一个星星的 x 坐标，随机得到一个新生成星星 x 坐标\n        var maxX = this.node.width / 2;\n        if (this.currentStarX >= 0) {\n            randX = -cc.random0To1() * maxX;\n        } else {\n            randX = cc.random0To1() * maxX;\n        }\n        this.currentStarX = randX;\n        // 返回星星坐标\n        return cc.p(randX, randY);\n    },\n\n    gainScore: function gainScore(pos) {\n        this.score += 1;\n        // 更新 scoreDisplay Label 的文字\n        this.scoreDisplay.string = 'Score: ' + this.score.toString();\n        // 播放特效\n        var fx = this.spawnScoreFX();\n        this.node.addChild(fx.node);\n        fx.node.setPosition(pos);\n        fx.play();\n        // 播放得分音效\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n\n    resetScore: function resetScore() {\n        this.score = 0;\n        this.scoreDisplay.string = 'Score: ' + this.score.toString();\n    },\n\n    spawnScoreFX: function spawnScoreFX() {\n        if (cc.pool.hasObject(ScoreFX)) {\n            fx = cc.pool.getFromPool(ScoreFX);\n            return fx;\n        } else {\n            fx = cc.instantiate(this.scoreFXPrefab);\n            return fx.getComponent('ScoreFX');\n        }\n    },\n\n    // called every frame\n    update: function update(dt) {\n        if (!this.isRunning) return;\n        // 每帧更新计时器，超过限度还没有生成新的星星\n        // 就会调用游戏失败逻辑\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            return;\n        }\n        this.timer += dt;\n    },\n\n    gameOver: function gameOver() {\n        this.gameOverNode.active = true;\n        this.player.enabled = false;\n        this.player.stopMove();\n        this.currentStar.destroy();\n        this.isRunning = false;\n        this.btnNode.setPositionX(0);\n    }\n});\n\ncc._RFpop();\n},{\"Player\":\"Player\",\"ScoreFX\":\"ScoreFX\",\"Star\":\"Star\"}],\"Player\":[function(require,module,exports){\ncc._RFpush(module, 'c10bbPdGYhDWaLoKLV38bHf', 'Player');\n// scripts/Player.js\n\n\"use strict\";\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // 主角跳跃高度\n        jumpHeight: 0,\n        // 主角跳跃持续时间\n        jumpDuration: 0,\n        // 辅助形变动作时间\n        squashDuration: 0,\n        // 最大移动速度\n        maxMoveSpeed: 0,\n        // 加速度\n        accel: 0,\n        // 跳跃音效资源\n        jumpAudio: {\n            \"default\": null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.enabled = false;\n        // 加速度方向开关\n        this.accLeft = false;\n        this.accRight = false;\n        // 主角当前水平方向速度\n        this.xSpeed = 0;\n        // screen boundaries\n        this.minPosX = -this.node.parent.width / 2;\n        this.maxPosX = this.node.parent.width / 2;\n\n        // 初始化跳跃动作\n        this.jumpAction = this.setJumpAction();\n\n        // 初始化键盘输入监听\n        this.setInputControl();\n    },\n\n    setInputControl: function setInputControl() {\n        var self = this;\n        //add keyboard input listener to jump, turnLeft and turnRight\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            // set a flag when key pressed\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.a:\n                    case cc.KEY.left:\n                        self.accLeft = true;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.d:\n                    case cc.KEY.right:\n                        self.accLeft = false;\n                        self.accRight = true;\n                        break;\n                }\n            },\n            // unset a flag when key released\n            onKeyReleased: function onKeyReleased(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.a:\n                    case cc.KEY.left:\n                        self.accLeft = false;\n                        break;\n                    case cc.KEY.d:\n                    case cc.KEY.right:\n                        self.accRight = false;\n                        break;\n                }\n            }\n        }, self.node);\n\n        // touch input\n        cc.eventManager.addListener({\n            event: cc.EventListener.TOUCH_ONE_BY_ONE,\n            onTouchBegan: function onTouchBegan(touch, event) {\n                var touchLoc = touch.getLocation();\n                if (touchLoc.x >= cc.winSize.width / 2) {\n                    self.accLeft = false;\n                    self.accRight = true;\n                } else {\n                    self.accLeft = true;\n                    self.accRight = false;\n                }\n                // don't capture the event\n                return true;\n            },\n            onTouchEnded: function onTouchEnded(touch, event) {\n                self.accLeft = false;\n                self.accRight = false;\n            }\n        }, self.node);\n    },\n\n    setJumpAction: function setJumpAction() {\n        // 跳跃上升\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        // 下落\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        // 形变\n        var squash = cc.scaleTo(this.squashDuration, 1, 0.6);\n        var stretch = cc.scaleTo(this.squashDuration, 1, 1.2);\n        var scaleBack = cc.scaleTo(this.squashDuration, 1, 1);\n        // 添加一个回调函数，用于在动作结束时调用我们定义的其他方法\n        var callback = cc.callFunc(this.playJumpSound, this);\n        // 不断重复，而且每次完成落地动作后调用回调来播放声音\n        return cc.repeatForever(cc.sequence(squash, stretch, jumpUp, scaleBack, jumpDown, callback));\n    },\n\n    playJumpSound: function playJumpSound() {\n        // 调用声音引擎播放声音\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n    },\n\n    getCenterPos: function getCenterPos() {\n        var centerPos = cc.p(this.node.x, this.node.y + this.node.height / 2);\n        return centerPos;\n    },\n\n    startMoveAt: function startMoveAt(pos) {\n        this.enabled = true;\n        this.xSpeed = 0;\n        this.node.setPosition(pos);\n        this.node.runAction(this.jumpAction);\n    },\n\n    stopMove: function stopMove() {\n        this.node.stopAllActions();\n    },\n\n    // called every frame\n    update: function update(dt) {\n        // 根据当前加速度方向每帧更新速度\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n        // 限制主角的速度不能超过最大值\n        if (Math.abs(this.xSpeed) > this.maxMoveSpeed) {\n            // if speed reach limit, use max speed with current direction\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        // 根据当前速度更新主角的位置\n        this.node.x += this.xSpeed * dt;\n\n        // limit player position inside screen\n        if (this.node.x > this.node.parent.width / 2) {\n            this.node.x = this.node.parent.width / 2;\n            this.xSpeed = 0;\n        } else if (this.node.x < -this.node.parent.width / 2) {\n            this.node.x = -this.node.parent.width / 2;\n            this.xSpeed = 0;\n        }\n    }\n});\n\ncc._RFpop();\n},{}],\"ScoreAnim\":[function(require,module,exports){\ncc._RFpush(module, 'b1f9e88YHdGr7qD17shtr2w', 'ScoreAnim');\n// scripts/ScoreAnim.js\n\n'use strict';\n\ncc.Class({\n    'extends': cc.Component,\n\n    hideFX: function hideFX() {\n        this.node.parent.removeFromParent();\n        cc.pool.putInPool(this.node.parent.getComponent('ScoreFX'));\n    }\n});\n\ncc._RFpop();\n},{}],\"ScoreFX\":[function(require,module,exports){\ncc._RFpush(module, 'dd18c67pr9OM5wJb/yY6Onf', 'ScoreFX');\n// scripts/ScoreFX.js\n\n'use strict';\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        anim: {\n            'default': null,\n            type: cc.Animation\n        }\n    },\n\n    play: function play() {\n        this.anim.play('score_pop');\n    }\n});\n\ncc._RFpop();\n},{}],\"Star\":[function(require,module,exports){\ncc._RFpush(module, '21890Xr4RBJlqTJhmXJ/f5s', 'Star');\n// scripts/Star.js\n\n\"use strict\";\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // 星星和主角之间的距离小于这个数值时，就会完成收集\n        pickRadius: 0\n    },\n\n    onLoad: function onLoad() {\n        this.enabled = false;\n    },\n\n    // use this for initialization\n    init: function init(game) {\n        this.game = game;\n        this.enabled = true;\n        this.node.opacity = 255;\n    },\n\n    getPlayerDistance: function getPlayerDistance() {\n        // 根据 player 节点位置判断距离\n        var playerPos = this.game.player.getCenterPos();\n        // 根据两点位置计算两点之间距离\n        var dist = cc.pDistance(this.node.position, playerPos);\n        return dist;\n    },\n\n    onPicked: function onPicked() {\n        var pos = this.node.getPosition();\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\n        this.game.spawnNewStar();\n        // 调用 Game 脚本的得分方法\n        this.game.gainScore(pos);\n        // 然后销毁当前星星节点\n        this.node.removeFromParent();\n        cc.pool.putInPool(this);\n    },\n\n    // called every frame\n    update: function update(dt) {\n        // 每帧判断和主角之间的距离是否小于收集距离\n        if (this.getPlayerDistance() < this.pickRadius) {\n            // 调用收集行为\n            this.onPicked();\n            return;\n        }\n        // 根据 Game 脚本中的计时器更新星星的透明度\n        var opacityRatio = 1 - this.game.timer / this.game.starDuration;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    }\n});\n\ncc._RFpop();\n},{}]},{},[\"Game\",\"Star\",\"ScoreAnim\",\"Player\",\"ScoreFX\"]);\n"],"sourceRoot":"/source/"}