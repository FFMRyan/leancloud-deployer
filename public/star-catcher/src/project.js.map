{"version":3,"sources":["project.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","Game","module","cc","_RFpush","Player","Class","extends","Component","properties","ground","default","type","Node","player","starPrefab","Prefab","btnNode","gameOverNode","controlHintLabel","ELabel","keyboardHint","multiline","touchHint","maxStarDuration","minStarDuration","onLoad","this","groundY","y","height","currentStar","currentStarX","timer","starDuration","isRunning","hintText","sys","isMobile","string","onStartGame","setPositionX","active","startMove","p","spawnNewStar","newStar","instantiate","node","addChild","setPosition","getNewStarPosition","getComponent","init","startTimer","random0To1","randomMinus1To1","width","randX","randY","jumpHeight","maxX","update","dt","gameOver","enabled","stopMove","destroy","_RFpop","jumpDuration","maxMoveSpeed","accel","scoreDisplay","jumpAudio","url","AudioClip","scoreAudio","xSpeed","accLeft","accRight","minPosX","parent","maxPosX","score","jumpAction","setJumpAction","setInputControl","self","eventManager","addListener","event","EventListener","KEYBOARD","onKeyPressed","keyCode","KEY","left","d","right","onKeyReleased","TOUCH_ONE_BY_ONE","onTouchBegan","touch","touchLoc","getLocation","x","winSize","onTouchEnded","jumpUp","moveBy","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","playJumpSound","repeatForever","sequence","audioEngine","playEffect","getCenterPos","centerPos","_sgNode","gainScore","toString","resetScore","pos","runAction","stopAllActions","Math","abs","Star","pickRadius","game","opacity","getPlayerDistance","playerPos","toPlayer","position","subSelf","dist","mag","onPicked","opacityRatio","minOpacity","floor"],"mappings":"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","file":"project.js","sourcesContent":["require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({\"Game\":[function(require,module,exports){\ncc._RFpush(module, '0486fOqHrJN+6c5PQg5FHh9', 'Game');\n// scripts/Game.js\n\n'use strict';\n\nvar Player = require('Player');\n\nvar Game = cc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        ground: {\n            'default': null,\n            type: cc.Node\n        },\n        player: {\n            'default': null,\n            type: Player\n        },\n        starPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n        btnNode: {\n            'default': null,\n            type: cc.Node\n        },\n        gameOverNode: {\n            'default': null,\n            type: cc.Node\n        },\n        controlHintLabel: {\n            'default': null,\n            type: cc.ELabel\n        },\n        keyboardHint: {\n            'default': '',\n            multiline: true\n        },\n        touchHint: {\n            'default': '',\n            multiline: true\n        },\n        maxStarDuration: 0,\n        minStarDuration: 0\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        // initialize player position\n        this.groundY = this.ground.y + this.ground.height / 2;\n\n        // store last star's x position\n        this.currentStar = null;\n        this.currentStarX = 0;\n\n        // star vanish timer\n        this.timer = 0;\n        this.starDuration = 0;\n\n        // is showing menu or running game\n        this.isRunning = false;\n\n        // initialize control hint\n        var hintText = cc.sys.isMobile ? this.touchHint : this.keyboardHint;\n        this.controlHintLabel.string = hintText;\n    },\n\n    onStartGame: function onStartGame() {\n        // set game state to running\n        this.isRunning = true;\n        // set button and gameover text out of screen\n        this.btnNode.setPositionX(3000);\n        this.gameOverNode.active = false;\n        // reset player position and move speed\n        this.player.startMove(cc.p(0, this.groundY));\n        // spawn star\n        this.spawnNewStar();\n    },\n\n    spawnNewStar: function spawnNewStar() {\n        var newStar = cc.instantiate(this.starPrefab);\n        this.node.addChild(newStar);\n        newStar.setPosition(this.getNewStarPosition());\n        // pass Game instance to star\n        newStar.getComponent('Star').init(this);\n        // start star timer and store star reference\n        this.startTimer();\n        this.currentStar = newStar;\n    },\n\n    startTimer: function startTimer() {\n        // get a life duration for next star\n        this.starDuration = this.minStarDuration + cc.random0To1() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n    },\n\n    getNewStarPosition: function getNewStarPosition() {\n        // if there's no star, set a random x pos\n        if (!this.currentStar) {\n            this.currentStarX = cc.randomMinus1To1() * this.node.width / 2;\n        }\n        var randX = 0;\n        var randY = this.groundY + cc.random0To1() * this.player.jumpHeight + 50;\n        var maxX = this.node.width / 2;\n        if (this.currentStarX >= 0) {\n            randX = -cc.random0To1() * maxX;\n        } else {\n            randX = cc.random0To1() * maxX;\n        }\n        this.currentStarX = randX;\n        return cc.p(randX, randY);\n    },\n\n    // called every frame\n    update: function update(dt) {\n        if (!this.isRunning) return;\n        // life cycle\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            return;\n        }\n        this.timer += dt;\n    },\n\n    gameOver: function gameOver() {\n        this.gameOverNode.active = true;\n        this.player.enabled = false;\n        this.player.stopMove();\n        this.currentStar.destroy();\n        this.isRunning = false;\n        this.btnNode.setPositionX(0);\n    }\n});\n\ncc._RFpop();\n},{\"Player\":\"Player\"}],\"Player\":[function(require,module,exports){\ncc._RFpush(module, 'c10bbPdGYhDWaLoKLV38bHf', 'Player');\n// scripts/Player.js\n\n'use strict';\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        jumpHeight: 0,\n        jumpDuration: 0,\n        maxMoveSpeed: 0,\n        accel: 0,\n        scoreDisplay: {\n            'default': null,\n            type: cc.ELabel\n        },\n        jumpAudio: {\n            'default': null,\n            url: cc.AudioClip\n        },\n        scoreAudio: {\n            'default': null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        // variables to store player status\n        this.xSpeed = 0;\n        // control input flags\n        this.accLeft = false;\n        this.accRight = false;\n        // screen boundaries\n        this.minPosX = -this.node.parent.width / 2;\n        this.maxPosX = this.node.parent.width / 2;\n        // player score\n        this.score = 0;\n\n        // set jump action\n        this.jumpAction = this.setJumpAction();\n\n        // input management\n        this.setInputControl();\n    },\n\n    setInputControl: function setInputControl() {\n        var self = this;\n        //add keyboard input listener to jump, turnLeft and turnRight\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            // set a flag when key pressed\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.a:\n                    case cc.KEY.left:\n                        self.accLeft = true;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.d:\n                    case cc.KEY.right:\n                        self.accLeft = false;\n                        self.accRight = true;\n                        break;\n                }\n            },\n            // unset a flag when key released\n            onKeyReleased: function onKeyReleased(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.a:\n                    case cc.KEY.left:\n                        self.accLeft = false;\n                        break;\n                    case cc.KEY.d:\n                    case cc.KEY.right:\n                        self.accRight = false;\n                        break;\n                }\n            }\n        }, self);\n\n        // touch input\n        cc.eventManager.addListener({\n            event: cc.EventListener.TOUCH_ONE_BY_ONE,\n            onTouchBegan: function onTouchBegan(touch, event) {\n                var touchLoc = touch.getLocation();\n                if (touchLoc.x >= cc.winSize.width / 2) {\n                    self.accLeft = false;\n                    self.accRight = true;\n                } else {\n                    self.accLeft = true;\n                    self.accRight = false;\n                }\n                // don't capture the event\n                return true;\n            },\n            onTouchEnded: function onTouchEnded(touch, event) {\n                self.accLeft = false;\n                self.accRight = false;\n            }\n        }, self);\n    },\n\n    setJumpAction: function setJumpAction() {\n        // jump action\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        var callback = cc.callFunc(this.playJumpSound, this);\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\n    },\n\n    playJumpSound: function playJumpSound() {\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n    },\n\n    getCenterPos: function getCenterPos() {\n        var centerPos = cc.p(this.node._sgNode.x, this.node._sgNode.y + this.node.height / 2);\n        return centerPos;\n    },\n\n    gainScore: function gainScore() {\n        this.score += 1;\n        this.scoreDisplay.string = 'Score: ' + this.score.toString();\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n\n    resetScore: function resetScore() {\n        this.score = 0;\n        this.scoreDisplay.string = 'Score: ' + this.score.toString();\n    },\n\n    startMove: function startMove(pos) {\n        this.enabled = true;\n        this.resetScore();\n        this.xSpeed = 0;\n        this.node.setPosition(pos);\n        this.node._sgNode.runAction(this.jumpAction);\n    },\n\n    stopMove: function stopMove() {\n        this.node._sgNode.stopAllActions();\n    },\n\n    // called every frame\n    update: function update(dt) {\n        // get current speed with control flag\n        // player need to keep pressing to accelerate\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n\n        if (Math.abs(this.xSpeed) > this.maxMoveSpeed) {\n            // if speed reach limit, use max speed with current direction\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        // update player position\n        this.node.x += this.xSpeed * dt;\n\n        // limit player position inside screen\n        if (this.node.x > this.maxPosX) {\n            this.node.x = this.maxPosX;\n            this.xSpeed = 0;\n        } else if (this.node.x < this.minPosX) {\n            this.node.x = this.minPosX;\n            this.xSpeed = 0;\n        }\n    }\n});\n\ncc._RFpop();\n},{}],\"Star\":[function(require,module,exports){\ncc._RFpush(module, '21890Xr4RBJlqTJhmXJ/f5s', 'Star');\n// scripts/Star.js\n\n\"use strict\";\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        pickRadius: 0\n    },\n\n    onLoad: function onLoad() {\n        this.enabled = false;\n    },\n\n    // use this for initialization\n    init: function init(game) {\n        this.game = game;\n        this.enabled = true;\n        this.node.opacity = 255;\n    },\n\n    getPlayerDistance: function getPlayerDistance() {\n        // from star to player position\n        var playerPos = this.game.player.getCenterPos();\n        var toPlayer = this.node.position.subSelf(playerPos); // cc.Vec2.subSelf\n        var dist = toPlayer.mag(); // cc.Vec2.mag\n        return dist;\n    },\n\n    onPicked: function onPicked() {\n        this.game.player.gainScore();\n        this.game.spawnNewStar();\n        this.node.destroy();\n    },\n\n    // called every frame\n    update: function update(dt) {\n        // if player is near enough to pick\n        if (this.getPlayerDistance() < this.pickRadius) {\n            this.onPicked();\n            return;\n        }\n\n        // star fade out as timer goes\n        var opacityRatio = 1 - this.game.timer / this.game.starDuration;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    }\n});\n\ncc._RFpop();\n},{}]},{},[\"Game\",\"Star\",\"Player\"]);\n"],"sourceRoot":"/source/"}